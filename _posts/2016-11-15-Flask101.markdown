---
layout: post
title:  "Flask101"
date:   2016-11-15 01:00:00 +0800
categories: flask
---
## 安装

> 需要`python`环境

### 使用虚拟环境

使用`virtualenv`创建虚拟环境

> Python 3.3 通过 venv 模块原生支持虚拟环境，命令为 pyvenv 。 pyvenv 可以替
代 virtualenv 。不过要注意，在 Python 3.3 中使用 pyvenv 命令创建的虚拟环
境不包含 pip ，你需要进行手动安装。Python 3.4 改进了这一缺陷， pyvenv 完
全可以代替 virtualenv

使用`virtualenv --version`检测是否有`virtualenv`

#### 安装`virtualenv`

* 下载[安装文件](https://bitbucket.org/pypa/setuptools)
* 解压后进入文件夹，**以管理员身份运行** 以下命令
```bash
$ python ez_setup.py
$ easy_install virtualenv
```

#### 创建虚拟环境

选择项目文件夹(如`flasky`)，进入该文件夹，运行
```bash
$ virtualenv venv
```
这样就创建了一个名为`venv`的虚拟环境，你可以在`flasky`文件夹下发现生成了一个`venv`文件夹
`venv`为虚拟环境名，可以自定义

#### 激活虚拟环境

```bash
$ source venv/bin/activate
```
如果是在windows命令行中
```bash
$ venv\Scripts\activate
```

激活成功后可以在命令行看到
```bash
(venv) $
```

退出虚拟环境
```bash
(venv) $ deactivate
```

### 安装Flask

```bash
(venv) $ pip install flask
```

## Hello World

### 代码

在`flasky`文件夹中创建文件`hello.py`
```python
from flask import Flask
app = Flask(__name__)

@app.route('/')
def index():
    return '<h1>Hello World!</h1>'

@app.route('/user/<name>')
def user(name):
    return '<h1>Hello, %s!</h1>' % name

if __name__ == '__main__':
    app.run(debug=True)
```

### 启动服务

```
(venv) { flasky } » python hello.py
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger pin code: 232-496-217
```

在浏览器中打开网址:`http://127.0.0.1:5000/` 查看结果

